# LUXA Menu Deployment & Database Improvements Documentation

## Overview
This document outlines all necessary changes to improve your deployment process and database management for both production and staging environments.

---

## 1. DEPLOYMENT SCRIPT IMPROVEMENTS

### 1.1 Update Staging Deployment Script
File: deploy-staging.sh
Location: /var/www/luxa-menu-staging/

Current Issues:
- Missing database migrations
- Missing database seeding
- No error handling

Required Changes:
```bash
#!/bin/bash
echo "üöÄ Deploying to Staging..."
cd /var/www/luxa-menu-staging

# Pull latest changes from main branch
git pull origin main

# Install dependencies
npm install

# Generate Prisma client
npm run generate

# Run database migrations
echo "üóÑÔ∏è Running database migrations..."
npx prisma migrate deploy

# Seed the database
echo "üå± Seeding database..."
npm run seed

# Build the application
npm run build -- --no-lint

# Restart PM2 process
pm2 restart luxa-menu-staging

echo "‚úÖ Staging deployment complete!"
```

### 1.2 Create Production Update Script
File: deploy-prod-update.sh
Location: /var/www/luxa-menu/

Purpose: For updating production without full server setup

Content:
```bash
#!/bin/bash
echo "üöÄ Updating Production..."
cd /var/www/luxa-menu

# Pull latest changes from main branch
git pull origin main

# Install dependencies
npm install

# Generate Prisma client
npm run generate

# Run database migrations
echo "üóÑÔ∏è Running database migrations..."
npx prisma migrate deploy

# Seed the database (if needed)
echo "üå± Seeding database..."
npm run seed

# Build the application
npm run build

# Restart PM2 process
pm2 restart luxa-menu

echo "‚úÖ Production update complete!"
```

### 1.3 Update Production Initial Setup Script
File: deploy.sh
Location: /var/www/luxa-menu/

Required Changes:
- Add database migration step
- Add database seeding step
- Improve error handling

Add after line 46 (after .env creation):
```bash
# Generate Prisma client
echo "üîß Generating Prisma client..."
npm run generate

# Run database migrations
echo "üóÑÔ∏è Running database migrations..."
npx prisma migrate deploy

# Seed the database
echo "üå± Seeding database..."
npm run seed
```

---

## 2. DATABASE CONFIGURATION IMPROVEMENTS

### 2.1 Standardize Prisma Schema
File: prisma/schema.prisma
Location: Both projects

Current Issue: Production uses hardcoded URL, staging uses env variable

Required Change:
```prisma
// Change from:
datasource db {
  provider = "postgresql"
  url      = "postgresql://menu_user:testpassword@localhost:5432/menu_dev"
}

// To:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
```

### 2.2 Create Environment-Specific .env Files

Production .env:
```bash
# /var/www/luxa-menu/.env
DATABASE_URL="postgresql://menu_user:luxa2024secure@localhost:5432/menu_dev"
NEXTAUTH_SECRET="luxa-menu-secret-key-2024"
NEXTAUTH_URL="http://noirvarna.com"
NODE_ENV="production"
```

Staging .env:
```bash
# /var/www/luxa-menu-staging/.env
DATABASE_URL="postgresql://menu_staging_user:luxa2024staging@localhost:5432/menu_staging"
NEXTAUTH_SECRET="luxa-menu-staging-secret-key-2024"
NEXTAUTH_URL="http://staging.noirvarna.com"
NODE_ENV="staging"
PORT=3001
```

### 2.3 Add Environment-Specific Build Scripts
File: package.json
Location: Both projects

Add to scripts section:
```json
{
  "scripts": {
    "dev": "npm run generate && next dev --turbopack",
    "build": "next build",
    "build:staging": "NODE_ENV=staging next build",
    "build:production": "NODE_ENV=production next build",
    "start": "next start",
    "lint": "next lint",
    "prisma:seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts",
    "seed": "npx prisma db seed",
    "generate": "npx prisma generate",
    "migrate:deploy": "npx prisma migrate deploy",
    "migrate:reset": "npx prisma migrate reset",
    "install:prisma": "npm install @prisma/client",
    "clear-cache": "rm -rf .next && npm run dev",
    "check-types": "npx tsc --noEmit",
    "check-node-version": "node -v"
  }
}
```

---

## 3. IMPLEMENTATION STEPS

### 3.1 Local Development Changes
1. Update Prisma Schema:
   - Change hardcoded URL to env("DATABASE_URL")
   - Commit changes to repository

2. Update Package.json:
   - Add environment-specific build scripts
   - Add migration scripts
   - Commit changes

3. Create New Deployment Scripts:
   - Create deploy-prod-update.sh
   - Update deploy-staging.sh
   - Update deploy.sh
   - Commit all scripts

### 3.2 Repository Push Process
```bash
# 1. Commit all changes locally
git add .
git commit -m "feat: improve deployment and database management"

# 2. Push to repository
git push origin main
```

### 3.3 Production Deployment
```bash
# 1. SSH to production server
ssh your-server

# 2. Navigate to production directory
cd /var/www/luxa-menu

# 3. Pull latest changes
git pull origin main

# 4. Update Prisma schema (if changed)
# Edit prisma/schema.prisma to use env("DATABASE_URL")

# 5. Run production update script
chmod +x deploy-prod-update.sh
./deploy-prod-update.sh
```

### 3.4 Staging Deployment
```bash
# 1. SSH to staging server
ssh your-server

# 2. Navigate to staging directory
cd /var/www/luxa-menu-staging

# 3. Pull latest changes
git pull origin main

# 4. Update Prisma schema (if changed)
# Edit prisma/schema.prisma to use env("DATABASE_URL")

# 5. Run staging deployment script
chmod +x deploy-staging.sh
./deploy-staging.sh
```

---

## 4. VERIFICATION STEPS

### 4.1 Database Verification
```bash
# Check production database
sudo -u postgres psql -d menu_dev -c "\dt"

# Check staging database
sudo -u postgres psql -d menu_staging -c "\dt"

# Verify both have same tables
```

### 4.2 Application Verification
```bash
# Check production app
curl http://noirvarna.com/api/menu-items

# Check staging app
curl http://staging.noirvarna.com/api/menu-items

# Check PM2 status
pm2 status
```

---

## 5. FILES TO MODIFY

### 5.1 Files to Create:
- deploy-prod-update.sh

### 5.2 Files to Modify:
- prisma/schema.prisma (both projects)
- package.json (both projects)
- deploy-staging.sh
- deploy.sh

### 5.3 Files to Keep As-Is:
- .env files (server-specific)
- prisma/seed.ts
- prisma/migrations/ (already correct)

---

## 6. IMPORTANT NOTES

1. Database URLs: Keep using different databases for production and staging
2. Environment Variables: Always use env("DATABASE_URL") in Prisma schema
3. Migrations: Always run migrations after code updates
4. Seeding: Run seeding after migrations
5. PM2: Restart PM2 after deployments
6. Backup: Consider backing up databases before major changes

---

## 7. EXPECTED OUTCOME

After implementing these changes:
- ‚úÖ Consistent database configuration across environments
- ‚úÖ Proper migration handling in both environments
- ‚úÖ Environment-specific build optimizations
- ‚úÖ Improved deployment reliability
- ‚úÖ Better separation between production and staging
- ‚úÖ Easier maintenance and updates
